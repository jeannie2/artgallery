<%- contentFor('styles') %>
  <%- contentFor('scripts') %>
    <script>
      const id = window.location.href.split('/').reverse()[0]
      const generateTitle = () => {
        return '<h1 class="text-center mb-3">Main Exhibition</h1>'
      } // update generateTitle h1 text?

      // update filter fields?
      const generateFilter = ({ queries } = {}) => {
        return `
    <form id="filter" class="row row-cols-lg-auto g-3 justify-content-center align-items-center mb-3">
      <div class="col-12">
        <div class="input-group">
          <div class="input-group-text">Search</div>
          <input
            class="form-control"
            placeholder="Content"
            name="q"
            type="text"
            value="${queries?.q || ''}"
          >
        </div>
      </div>

      <div class="col-12">
        <div class="input-group">
          <div class="input-group-text">Filter By</div>
          <select class="form-select" name="orderBy" value="${queries?.orderBy || ''}">
            <option ${queries?.orderBy === 'id' ? 'selected' : ''} value="id">ID</option>
            <option ${queries?.orderBy === 'title' ? 'selected' : ''} value="title">Title</option>
            <option ${queries?.orderBy === 'description' ? 'selected' : ''} value="description">Description</option>
          </select>
        </div>
      </div>

      <div class="col-12">
        <div class="input-group">
          <div class="input-group-text">Sort By</div>
          <select class="form-select" name="sortBy">
            <option ${queries?.sortBy === 'asc' ? 'selected' : ''} value="asc">Ascending</option>
            <option ${queries?.sortBy === 'desc' ? 'selected' : ''} value="desc">Descending</option>
          </select>
        </div>
      </div>

      <div class="col-12">
        <button class="btn btn-light" type="submit" >Submit</button>
      </div>

      <div class="col-12">
        <button id="reset-form" class="btn btn-danger" type="reset">Reset</button>
      </div>
    </form>
  `
      }

      // check href
      const generateListing = (listing) => {
        return `
    <div class="col">
      <a class="card text-body" href="/listing/${listing.id}" style="text-decoration: none;">
        <div class="card-body text-center">
          <img class="mb-2" src="${listing.user.avatar}" alt="user avatar" width="150" />
          <h5 class="card-title mb-2">${listing.title}</h5>
          <p class="card-text mb-2">${listing.description}</p>
        </div>
      </a>
    </div>
  `
      }

      const generateListings = ({ isLoading, listings = [] } = {}) => {
        if (isLoading) return `<div class="text-center mb-3">Loading...</div>`
        if (listings.length === 0) {
          return `
      <h2 class="text-center mb-3">No Listing Found!</h2>
    `
        }

        return `
    <div class="row">
      <div class="col-12 col-md-10 offset-md-1 col-lg-8 offset-lg-2">
        <div id="listings-list" class="row row-cols-1 g-3">
          ${listings.map(generateListing).join('')}
        </div>
      </div>
    </div>
  `
      }

      /*
      const generatePagination = (isLoading, { currentPage = 1, totalPages = 1 } = {}) => {
              if (isLoading) return ''

              let links = ''

              if (totalPages > 2 && currentPage > 1) links += `<li class="page-item"><a class="page-link" href="#" data-page="1">First</a></li>`
              if (currentPage - 1 >= 1) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage - 1}">Prev</a></li>`
              if (currentPage - 2 >= 1) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage - 2}">${currentPage - 2}</a></li>`
              if (currentPage - 1 >= 1) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage - 1}">${currentPage - 1}</a></li>`

              links += `<li class="page-item active"><a class="page-link">${currentPage}</a></li>`

              if (currentPage + 1 <= totalPages) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage + 1}">${currentPage + 1}</a></li>`
              if (currentPage + 2 <= totalPages) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage + 2}">${currentPage + 2}</a></li>`
              if (currentPage + 1 <= totalPages) links += `<li class="page-item"><a class="page-link" href="#" data-page="${currentPage + 1}">Next</a></li>`
              if (totalPages > 2 && currentPage < totalPages) links += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">Last</a></li>`

              return `
          <ul class="pagination justify-content-center mt-3">
            ${links}
          </ul>
        `
      } */

      const generatePage = (info) => {
        const $page = $('#pages-listings-index')
        const $title = generateTitle(info)
        const $filter = generateFilter(info)
        const $listings = generateListings(info)
        // const $pagination = generatePagination(info)

        $page.html('').append($title).append($filter).append($listings) // .append($pagination)
      }

      const getListings = () => {
        axios({
          method: 'GET',
          url: `/api/halls/${id}` // check api/halls
        }).then((resp) => {
          console.log(resp.data)
          generatePage({ listings: resp.data })
          // generatePage({ listings: resp.data.listings })
          // generatePage({ listings: resp.data.listings, meta: resp.data.meta })
        })
      }

      const handleFilterSubmit = (e) => {
        e.preventDefault()

        const queries = parseFormData(new FormData(e.currentTarget))
        generatePage({ isLoading: true, queries })

        axios({
          method: 'GET',
          url: `/api/halls/${id}`, // check
          params: queries
        }).then((resp) => {
          generatePage({ queries, listings: resp.data })
          // generatePage({ queries, listings: resp.data.listings })
          // generatePage({ queries, wishlists: resp.data.wishlists, meta: resp.data.meta })
        })
      }

      const handleFilterReset = (e) => {
        generatePage({ isLoading: true })
        getListings()
      }

      const handlePageChange = (e) => {
        e.preventDefault()

        const queries = parseFormData(new FormData($('#filter')[0]))
        const page = $(e.currentTarget).data('page')
        generatePage({ isLoading: true, queries })

        axios({
          method: 'GET',
          url: `/api/halls/${id}`, // check
          params: { page, ...queries }
        }).then((resp) => {
          generatePage({ queries, listings: resp.data })
          // generatePage({ queries, listings: resp.data.listings })
          // generatePage({ queries, wishlists: resp.data.wishlists, meta: resp.data.meta })
        })
      }

      $(document).ready(() => {
        generatePage({ isLoading: true })
        getListings()
        $('#pages-listings-index').on('submit', '#filter', handleFilterSubmit)
        $('#pages-listings-index').on('click', '#filter #reset-form', handleFilterReset)
        $('#pages-listings-index').on('click', '.page-link', handlePageChange)
      })

    </script>

    <%- contentFor('body') %>
      <div id="pages-listings-index" class="container"></div>
